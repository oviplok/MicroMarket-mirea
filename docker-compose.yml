version: '3.7'
# ПРОВЕРИТЬ ПРОФИЛИ ВСЯЧЕСКИ МБ ИЗ-ЗА НИХ ВСЕ СТУКАЕТСЯ А ТАКЖЕ БИЛДИТЬ ДЖАРЫ
services:
  ## MySQL Docker Compose Config
  #  postgres-order:
  #    container_name: postgres-order
  #    image: postgres
  #    environment:
  #      POSTGRES_DB: micro-order
  #      POSTGRES_USER: user0110
  #      POSTGRES_PASSWORD: Ne903
  #      PGDATA: /data/postgres
  #    volumes:
  #      - ./postgres-order:/data/postgres
  #    expose:
  #      - "5431"
  #    ports:
  #      - "5431:5431"
  #    command: -p 5431
  #    restart: unless-stopped
  mysql-order:
    container_name: mysql-order
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: micro-order
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user0110
      MYSQL_PASSWORD: Ne903
    volumes:
      - ./mysql-order:/var/lib/mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"
#    command: -p 3307
    restart: always

  #  postgres-inventory:
  #    container_name: postgres-inventory
  #    image: postgres
  #    environment:
  #      POSTGRES_DB: micro-inventory
  #      POSTGRES_USER: user0110
  #      POSTGRES_PASSWORD: Ne903
  #      PGDATA: /data/postgres
  #    volumes:
  #      - ./postgres-inventory:/data/postgres
  #    ports:
  #      - "5432:5432"
  #    restart: unless-stopped
  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: micro-inventory
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user0110
      MYSQL_PASSWORD: Ne903
    volumes:
      - ./mysql-inventory:/var/lib/mysql
#    expose:
#      - "3308"
    ports:
      - "3308:3308"
#    command: -p 3308
    restart: always

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
#      - ES_HOSTS=http://localhost:8181


  ## Eureka Server
  discovery-server:
    image: hahehm/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
    depends_on:
      - zipkin

  api-gateway:
    image: hahehm/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  micro-product:
    container_name: product-service
    image: hahehm/micro-products:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  micro-order:
    container_name: order-service
    image: hahehm/micro-order:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/micro-order
    #      - SPRING_PROFILES_ACTIVE=docker
    #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/micro-order
    depends_on:
      - mysql-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  micro-inventory:
    container_name: inventory-service
    image: hahehm/micro-inventory:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3308/micro-inventory
    #      - SPRING_PROFILES_ACTIVE=docker
    #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inv_service
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: hahehm/notification-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.profiles.active=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

# Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - micro-product
      - micro-inventory
      - micro-order
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password











#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.0.1
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  broker:
#    image: confluentinc/cp-kafka:7.0.1
#    container_name: broker
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1